// Generated by purs version 0.11.6
"use strict";
var Control_Applicative = require("../Control.Applicative");
var Control_Apply = require("../Control.Apply");
var Control_Bind = require("../Control.Bind");
var Control_Monad_Aff = require("../Control.Monad.Aff");
var Control_Monad_Aff_Class = require("../Control.Monad.Aff.Class");
var Control_Monad_State_Class = require("../Control.Monad.State.Class");
var Control_Semigroupoid = require("../Control.Semigroupoid");
var DOM = require("../DOM");
var DOM_Event_Event = require("../DOM.Event.Event");
var Data_Argonaut = require("../Data.Argonaut");
var Data_Argonaut_Parser = require("../Data.Argonaut.Parser");
var Data_Array = require("../Data.Array");
var Data_Either = require("../Data.Either");
var Data_Foldable = require("../Data.Foldable");
var Data_Function = require("../Data.Function");
var Data_Functor = require("../Data.Functor");
var Data_Maybe = require("../Data.Maybe");
var Data_Monoid = require("../Data.Monoid");
var Data_Ord = require("../Data.Ord");
var Data_Ring = require("../Data.Ring");
var Data_Semigroup = require("../Data.Semigroup");
var Data_Semiring = require("../Data.Semiring");
var Data_Show = require("../Data.Show");
var Data_StrMap = require("../Data.StrMap");
var Data_Traversable = require("../Data.Traversable");
var Data_Tuple = require("../Data.Tuple");
var GBFS = require("../GBFS");
var Halogen = require("../Halogen");
var Halogen_Component = require("../Halogen.Component");
var Halogen_HTML = require("../Halogen.HTML");
var Halogen_HTML_Core = require("../Halogen.HTML.Core");
var Halogen_HTML_Elements = require("../Halogen.HTML.Elements");
var Halogen_HTML_Events = require("../Halogen.HTML.Events");
var Halogen_HTML_Properties = require("../Halogen.HTML.Properties");
var Halogen_Query_HalogenM = require("../Halogen.Query.HalogenM");
var $$Math = require("../Math");
var Network_HTTP_Affjax = require("../Network.HTTP.Affjax");
var Network_HTTP_Affjax_Response = require("../Network.HTTP.Affjax.Response");
var Prelude = require("../Prelude");
var Refresh = (function () {
    function Refresh(value0) {
        this.value0 = value0;
    };
    Refresh.create = function (value0) {
        return new Refresh(value0);
    };
    return Refresh;
})();
var work = {
    name: "work", 
    lat: 42.33863, 
    lon: -71.092228
};
var statusUrl = "https://gbfs.thehubway.com/gbfs/en/station_status.json";
var renderStation = function (dictShow) {
    return function (dictShow1) {
        return function (s) {
            return Halogen_HTML_Elements.tr_(Data_Functor.map(Data_Functor.functorArray)(function ($29) {
                return Halogen_HTML_Elements.td_(Control_Applicative.pure(Control_Applicative.applicativeArray)(Halogen_HTML_Core.text($29)));
            })([ s.info.name, Data_Show.show(dictShow)(s.status.num_bikes_available), Data_Show.show(dictShow1)(s.status.num_docks_available) ]));
        };
    };
};
var renderData = function (dictShow) {
    return function (dictShow1) {
        return function (dat) {
            return Halogen_HTML_Elements.tbody_(Data_Functor.map(Data_Functor.functorArray)(renderStation(dictShow)(dictShow1))(dat));
        };
    };
};
var proximity = function (p1) {
    return function (p2) {
        return $$Math.pow(p1.lat - p2.lat)(2.0) + $$Math.pow(p1.lon - p2.lon)(2.0);
    };
};
var mergeHWData = function (is) {
    var idMap = Data_StrMap.unions(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(function (s) {
        return Data_StrMap.singleton(s.station_id)(s);
    })(is.info));
    var findStatus = function (status) {
        var v = Data_StrMap.lookup(status.station_id)(idMap);
        if (v instanceof Data_Maybe.Nothing) {
            return Data_Monoid.mempty(Data_Monoid.monoidArray);
        };
        if (v instanceof Data_Maybe.Just) {
            return Control_Applicative.pure(Control_Applicative.applicativeArray)({
                info: v.value0, 
                status: status
            });
        };
        throw new Error("Failed pattern match at App line 119, column 25 - line 121, column 54: " + [ v.constructor.name ]);
    };
    return Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)(findStatus)(is.status);
};
var infoUrl = "https://gbfs.thehubway.com/gbfs/en/station_information.json";
var home = {
    name: "home", 
    lat: 42.34852014581272, 
    lon: -71.13394662737846
};
var header = Halogen_HTML_Elements.thead_([ Halogen_HTML_Elements.tr_(Data_Functor.map(Data_Functor.functorArray)(function ($30) {
    return Halogen_HTML_Elements.th_(Control_Applicative.pure(Control_Applicative.applicativeArray)(Halogen_HTML_Core.text($30)));
})([ "Station", "Bikes", "Vacancies" ])) ]);
var renderNearPlace = function (dictShow) {
    return function (dictShow1) {
        return function (hwData) {
            return function (place) {
                var nearbyData = Data_Array.take(6)(Data_Array.sortWith(Data_Ord.ordNumber)(function (dat) {
                    return proximity(place)(dat.info);
                })(hwData));
                return Halogen_HTML_Elements.div_([ Halogen_HTML_Elements.h2_([ Halogen_HTML_Core.text("Places near " + place.name) ]), Halogen_HTML_Elements.table_([ header, renderData(dictShow)(dictShow1)(nearbyData) ]) ]);
            };
        };
    };
};
var ui = (function () {
    var render = function (st) {
        if (st instanceof Data_Maybe.Nothing) {
            return Halogen_HTML_Core.text("Loading...");
        };
        if (st instanceof Data_Maybe.Just) {
            var v = Control_Apply.apply(Data_Either.applyEither)(Data_Functor.map(Data_Either.functorEither)(Data_Tuple.Tuple.create)(st.value0.stationStatuses))(st.value0.stationInfos);
            if (v instanceof Data_Either.Left) {
                return Halogen_HTML_Core.text("Error: " + v.value0);
            };
            if (v instanceof Data_Either.Right) {
                var hwData = mergeHWData({
                    info: v.value0.value1, 
                    status: v.value0.value0
                });
                return Halogen_HTML_Elements.div_([ renderNearPlace(Data_Show.showNumber)(Data_Show.showNumber)(hwData)(home), renderNearPlace(Data_Show.showNumber)(Data_Show.showNumber)(hwData)(work) ]);
            };
            throw new Error("Failed pattern match at App line 60, column 11 - line 64, column 86: " + [ v.constructor.name ]);
        };
        throw new Error("Failed pattern match at App line 57, column 7 - line 64, column 86: " + [ st.constructor.name ]);
    };
    var initialState = function (s) {
        return Data_Maybe.Nothing.value;
    };
    var getParse = function (parser) {
        return function (url) {
            var parseResponse = function (s) {
                return Control_Bind.bind(Data_Either.bindEither)(Data_Argonaut_Parser.jsonParser(s))(function (v) {
                    return Data_Functor.map(Data_Either.functorEither)(function (v1) {
                        return v1["data'"];
                    })(parser(v));
                });
            };
            return Control_Bind.bind(Control_Monad_Aff.bindAff)(Network_HTTP_Affjax.get(Network_HTTP_Affjax_Response.responsableString)(url))(function (v) {
                return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(parseResponse(v.response));
            });
        };
    };
    var $$eval = function (v) {
        return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(getParse(GBFS.parseStationInfos)(infoUrl)))(function (v1) {
            return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(getParse(GBFS.parseStationStatuses)(statusUrl)))(function (v2) {
                return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(new Data_Maybe.Just({
                    stationStatuses: v2, 
                    stationInfos: v1
                })))(function () {
                    return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                });
            });
        });
    };
    return Halogen_Component.component(Halogen_HTML_Core.bifunctorHTML)({
        initialState: initialState, 
        render: render, 
        "eval": $$eval, 
        receiver: Data_Function["const"](Data_Maybe.Nothing.value)
    });
})();
module.exports = {
    Refresh: Refresh, 
    statusUrl: statusUrl, 
    ui: ui
};

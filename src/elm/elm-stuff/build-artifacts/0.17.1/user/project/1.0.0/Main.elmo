var _user$project$Main$header = A2(
	_elm_lang$html$Html$thead,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$tr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$th,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Station')
						])),
					A2(
					_elm_lang$html$Html$th,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Bikes')
						])),
					A2(
					_elm_lang$html$Html$th,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Vacancies')
						]))
				]))
		]));
var _user$project$Main$view_station = function (station) {
	return A2(
		_elm_lang$core$List$map,
		function (_p0) {
			return A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				function (x) {
					return _elm_lang$core$Native_List.fromArray(
						[x]);
				}(_p0));
		},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(station.station_id),
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(station.num_bikes_available)),
				_elm_lang$html$Html$text(
				_elm_lang$core$Basics$toString(station.num_docks_available))
			]));
};
var _user$project$Main$mk_station_status = F3(
	function (id, bikes, docks) {
		return {station_id: id, num_bikes_available: bikes, num_docks_available: docks};
	});
var _user$project$Main$station_status = A4(
	_elm_lang$core$Json_Decode$object3,
	_user$project$Main$mk_station_status,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'station_id', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'num_bikes_available', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'num_docks_available', _elm_lang$core$Json_Decode$int));
var _user$project$Main$model_decoder = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['data', 'stations']),
	_elm_lang$core$Json_Decode$list(_user$project$Main$station_status));
var _user$project$Main$fetch = A3(
	_elm_lang$core$Task$perform,
	_elm_lang$core$Result$Err,
	_elm_lang$core$Result$Ok,
	A2(_evancz$elm_http$Http$get, _user$project$Main$model_decoder, 'https://gbfs.thehubway.com/gbfs/en/station_status.json'));
var _user$project$Main$stations_i_care_about = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: '5', _1: 'Northeastern North Parking Lot'},
			{ctor: '_Tuple2', _0: '160', _1: 'Wentworth'},
			{ctor: '_Tuple2', _0: '66', _1: 'Griggs Street'},
			{ctor: '_Tuple2', _0: '103', _1: 'JFK at Harvard Street'},
			{ctor: '_Tuple2', _0: '41', _1: 'Packard\'s Corner'},
			{ctor: '_Tuple2', _0: '8', _1: 'Brighton & Cambridge'},
			{ctor: '_Tuple2', _0: '12', _1: 'Ruggles'}
		]));
var _user$project$Main$filter_stations = function (ss) {
	var do_i_care = function (stat) {
		var _p1 = A2(_elm_lang$core$Dict$get, stat.station_id, _user$project$Main$stations_i_care_about);
		if (_p1.ctor === 'Nothing') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.update(
					stat,
					{station_id: _p1._0}));
		}
	};
	return A2(_elm_lang$core$List$filterMap, do_i_care, ss);
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				function () {
				var _p2 = model;
				switch (_p2.ctor) {
					case 'Loading':
						return _elm_lang$html$Html$text('Fetching Data...');
					case 'Fail':
						return _elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(_p2._0));
					default:
						var relevant_stations = _user$project$Main$filter_stations(_p2._0);
						var rows = A2(
							_elm_lang$core$List$map,
							function (_p3) {
								return A2(
									_elm_lang$html$Html$tr,
									_elm_lang$core$Native_List.fromArray(
										[]),
									_user$project$Main$view_station(_p3));
							},
							relevant_stations);
						return A2(
							_elm_lang$html$Html$table,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									_user$project$Main$header,
									A2(
									_elm_lang$html$Html$tbody,
									_elm_lang$core$Native_List.fromArray(
										[]),
									rows)
								]));
				}
			}()
			]));
};
var _user$project$Main$StationStatus = F3(
	function (a, b, c) {
		return {station_id: a, num_bikes_available: b, num_docks_available: c};
	});
var _user$project$Main$Stations = function (a) {
	return {ctor: 'Stations', _0: a};
};
var _user$project$Main$Fail = function (a) {
	return {ctor: 'Fail', _0: a};
};
var _user$project$Main$update = F2(
	function (new_info, st) {
		var _p4 = new_info;
		if (_p4.ctor === 'Err') {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Main$Fail(_p4._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _user$project$Main$Stations(_p4._0),
				_1: _elm_lang$core$Platform_Cmd$none
			};
		}
	});
var _user$project$Main$Loading = {ctor: 'Loading'};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$Loading, _1: _user$project$Main$fetch};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: _user$project$Main$init,
			view: _user$project$Main$view,
			update: _user$project$Main$update,
			subscriptions: function (_p5) {
				return _elm_lang$core$Platform_Sub$none;
			}
		})
};

// Generated by purs version 0.11.6
"use strict";
var Type_Data_Boolean = require("../Type.Data.Boolean");
var Type_Data_Symbol = require("../Type.Data.Symbol");
var Type_Equality = require("../Type.Equality");
var RProxy = (function () {
    function RProxy() {

    };
    RProxy.value = new RProxy();
    return RProxy;
})();
var RLProxy = (function () {
    function RLProxy() {

    };
    RLProxy.value = new RLProxy();
    return RLProxy;
})();
var RowLacking = {};
var RowLacks = {};
var RowToList = {};
var ListToRow = {};
var RowListRemove = {};
var RowListSet = {};
var RowListNub = {};
var RowListAppend = {};
var rowListSetImpl = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return function (dictRowListRemove) {
            return RowListSet;
        };
    };
};
var rowListRemoveNil = RowListRemove;
var rowListRemoveCons = function (dictRowListRemove) {
    return function (dictEquals) {
        return function (dictIf) {
            return RowListRemove;
        };
    };
};
var rowListNubNil = RowListNub;
var rowListNubCons = function (dictTypeEquals) {
    return function (dictTypeEquals1) {
        return function (dictTypeEquals2) {
            return function (dictRowListRemove) {
                return function (dictRowListNub) {
                    return RowListNub;
                };
            };
        };
    };
};
var rowListAppendNil = function (dictTypeEquals) {
    return RowListAppend;
};
var rowListAppendCons = function (dictRowListAppend) {
    return function (dictTypeEquals) {
        return RowListAppend;
    };
};
var rowLacks = function (dictRowCons) {
    return function (dictUnion) {
        return function (dictRowCons1) {
            return function (dictRowLacking) {
                return RowLacks;
            };
        };
    };
};
var rowLacking = RowLacking;
var listToRowNil = ListToRow;
var listToRowCons = function (dictListToRow) {
    return function (dictRowCons) {
        return ListToRow;
    };
};
module.exports = {
    RLProxy: RLProxy, 
    RProxy: RProxy, 
    ListToRow: ListToRow, 
    RowLacking: RowLacking, 
    RowLacks: RowLacks, 
    RowListAppend: RowListAppend, 
    RowListNub: RowListNub, 
    RowListRemove: RowListRemove, 
    RowListSet: RowListSet, 
    RowToList: RowToList, 
    rowLacking: rowLacking, 
    rowLacks: rowLacks, 
    listToRowNil: listToRowNil, 
    listToRowCons: listToRowCons, 
    rowListRemoveNil: rowListRemoveNil, 
    rowListRemoveCons: rowListRemoveCons, 
    rowListSetImpl: rowListSetImpl, 
    rowListNubNil: rowListNubNil, 
    rowListNubCons: rowListNubCons, 
    rowListAppendNil: rowListAppendNil, 
    rowListAppendCons: rowListAppendCons
};
